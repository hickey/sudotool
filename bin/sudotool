#!/usr/bin/env ruby

require 'sudotool'
require 'sudoerfile'
require 'sudoright'
require 'optparse'
require 'rainbow'


module SudoTool
  # process the command line
  options = { :add_user    => [],
              :del_user    => [],
              :runas       => '',
              :hostgrp     => 'ALL',
              :cmdgrp      => '',
              :expire      => nil,
              :action      => :normal,
              :basedir     => '/etc/sudoers.d',
              :logfile     => '/dev/tty',
              :omit_user   => [] }
  # sudotool [--add|--del USER] --runas USERTOBE --hostgrp GROUP --cmdgrp GROUP --expire TIME FILE
  # sudotool --purge [--basedir DIR] [--logfile FILE]
  OptionParser.new do |opt|
    opt.banner = "Usage: sudotool [options] filename"
    
    # Add and remove users
    opt.on('--add USER', '-a', 'Add user rights to sudoers file') {|val|
      options[:add_user] << val
    }
    opt.on('--del USER', '--remove', '--rm', '-r', 'Remove user rights from sudoers file') {|val|
      options[:del_user] << val
    }
    
    # user options
    opt.on('--runas USER', '-R', 'user allowed to sudo as') {|val|
      options[:runas] = val
    }
    opt.on('--hostgrp NAME', '-H', 'restrict sudo access to specified host group') {|val|
      options[:hostgrp] = val
    }
    opt.on('--cmdgrp NAME', '-C', 'commands to give access to') {|val|
      options[:cmdgrp] = val
    }

    
    opt.on('--expire TIME', '-x', 'when the sudoers access should expire') {|val|
      options[:expire] = val
    }
    opt.on('--purge', '-P', 'lockout expired files') {
      options[:action] = :purge
    }
    
    opt.on('--log FILE', '-l', 'log actions of purging to FILE') {|val|
      options[:logfile] = val
    }
    opt.on('--basedir DIR', '-d', 'location of sudoers files (default: /etc/sudoers.d)') {|val|
      options[:basedir] = val
    }
    
    # Convert a sudoer file to a component file
    opt.on('--convert FILE', 'extract entries from sudoers file into a component file') {|val|
      options[:convert] = val
    }
    opt.on('--omit-user USERNAME', '-O', 'Omit user when converting to a component file') {|val|
      options[:omit_user] << val
    }
    
    # supid 1.8.7 does not define --help
    opt.on_tail('--help', '-h', 'Display command line help') {
      puts opt
      exit
    }
  end.parse!
  

  if options[:action] == :purge
    SudoTool::purge
    exit
  else
    # Create / read in a SudoerFile instance
    sudofile = SudoerFile.new "#{options[:basedir]}/#{ARGV[0]}"
    
    # Adding permissions?
    unless options[:add_user].empty?
      options[:add_user].each do |user|
        # Create the sudo right and add the hostgroup
        begin
          right = SudoRight.new(user)
                      .hostgrp(options[:hostgrp])
                      .runas(options[:runas])
                      .cmd(options[:cmd])
        rescue ArgumentError => e
          $stderr.puts "#{e}".color(:red)
          exit 1
        end

        sudofile.add_right right
      end
    end
    
    # Removing permissions? 
    unless options[:del_user].empty?
      options[:del_user].each do |user|
        sudofile.del_right_for_user user
      end
    end
    
    # Converting to a component file? 
    if options[:convert]
      orig_sudofile = SudoTool::SudoerFile.new options[:convert]
      
      # walk through the sudo rights and move over to component file
      orig_sudofile.rights.each do |right|
        unless options[:omit_user].member? right.user
          sudofile.add_right right
        end
      end
    end
    
    # Are we setting the expiration of the file?
    unless options[:expire].nil?
      sudofile.expiration = SudoTool::pretty_time_to_real_time options[:expire]
    end
    
    # All done making changes... commit them. 
    begin
      sudofile.write
    rescue Errno::EACCES 
      $stderr.puts "#{sudofile.filename} can not be written. Executing as root?".color(:red)
      exit 2
    end
  end
end
